{"version":3,"sources":["Validation/Validation.js","Char/Char.jsx","App.js","serviceWorker.js","index.js"],"names":["Validation","props","ValidationMessage","inputLength","style","color","Char","display","textAling","padding","margin","border","backgroundColor","cursor","onClick","clicked","character","App","state","userInput","inputChangedHandler","event","setState","target","value","deleteCharHandler","index","text","split","splice","updatedText","join","charList","this","map","ch","key","className","placeholder","type","onChange","length","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wNAqBeA,EAnBI,SAACC,GAClB,IAAIC,EAAoB,mBAEpBD,EAAME,aAAe,IACvBD,EAAoB,iBAOtB,OACE,yBAAKE,MALW,CAChBC,MAAO,SAKL,4BAAKH,GACL,gDCISI,EAlBF,SAACL,GAWZ,OACE,yBAAKG,MAXW,CAChBG,QAAS,eACTC,UAAW,SACXC,QAAS,OACTC,OAAQ,MACRC,OAAQ,kBACRC,gBAAiB,OACjBC,OAAQ,WAIeC,QAASb,EAAMc,SACnCd,EAAMe,YCoCEC,G,kNA5CbC,MAAQ,CACNC,UAAW,kB,EAGbC,oBAAsB,SAACC,GACrB,EAAKC,SAAS,CAAEH,UAAWE,EAAME,OAAOC,S,EAG1CC,kBAAoB,SAACC,GACnB,IAAMC,EAAO,EAAKT,MAAMC,UAAUS,MAAM,IACxCD,EAAKE,OAAOH,EAAO,GACnB,IAAMI,EAAcH,EAAKI,KAAK,IAC9B,EAAKT,SAAS,CAAEH,UAAWW,K,uDAGnB,IAAD,OACDE,EAAWC,KAAKf,MAAMC,UAAUS,MAAM,IAAIM,KAAI,SAACC,EAAIT,GACvD,OACE,kBAAC,EAAD,CACEV,UAAWmB,EACXC,IAAKV,EACLX,QAAS,kBAAM,EAAKU,kBAAkBC,SAK5C,OACE,yBAAKW,UAAU,OACb,6BACA,2BACEC,YAAY,iBACZC,KAAK,OACLC,SAAUP,KAAKb,oBACfI,MAAOS,KAAKf,MAAMC,YAEpB,4BAAKc,KAAKf,MAAMC,WAChB,kBAAC,EAAD,CAAYhB,YAAa8B,KAAKf,MAAMC,UAAUsB,SAC7CT,EACD,kC,GAvCUU,IAAMC,YCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.43c91f6d.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Validation = (props) => {\r\n  let ValidationMessage = \"Text Long Enough\";\r\n\r\n  if (props.inputLength <= 5) {\r\n    ValidationMessage = \"Text To Short\";\r\n  }\r\n\r\n  const textStyle = {\r\n    color: \"#fff\",\r\n  };\r\n\r\n  return (\r\n    <div style={textStyle}>\r\n      <h2>{ValidationMessage}</h2>\r\n      <h3>Click And Play</h3>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Validation;\r\n","import React from \"react\";\r\n\r\nconst Char = (props) => {\r\n  const charStyle = {\r\n    display: \"inline-block\",\r\n    textAling: \"center\",\r\n    padding: \"16px\",\r\n    margin: \"8px\",\r\n    border: \"solid 1px white\",\r\n    backgroundColor: \"gray\",\r\n    cursor: \"pointer\",\r\n  };\r\n\r\n  return (\r\n    <div style={charStyle} onClick={props.clicked}>\r\n      {props.character}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Char;\r\n","import React from \"react\";\nimport Validation from \"./Validation/Validation\";\nimport Char from \"./Char/Char\";\n\nimport \"./App.css\";\n\nclass App extends React.Component {\n  state = {\n    userInput: \"Hello everyone\",\n  };\n\n  inputChangedHandler = (event) => {\n    this.setState({ userInput: event.target.value });\n  };\n\n  deleteCharHandler = (index) => {\n    const text = this.state.userInput.split(\"\");\n    text.splice(index, 1);\n    const updatedText = text.join(\"\");\n    this.setState({ userInput: updatedText });\n  };\n\n  render() {\n    const charList = this.state.userInput.split(\"\").map((ch, index) => {\n      return (\n        <Char\n          character={ch}\n          key={index}\n          clicked={() => this.deleteCharHandler(index)}\n        />\n      );\n    });\n\n    return (\n      <div className=\"App\">\n        <hr />\n        <input\n          placeholder=\"Type Something\"\n          type=\"text\"\n          onChange={this.inputChangedHandler}\n          value={this.state.userInput}\n        />\n        <h2>{this.state.userInput}</h2>\n        <Validation inputLength={this.state.userInput.length} />\n        {charList}\n        <hr />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}